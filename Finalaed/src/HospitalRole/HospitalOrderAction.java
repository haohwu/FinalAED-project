/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package userinterface.HospitalRole;

import Business.Customer.Customer;
import Business.Hospital.Hospital;
import Business.MedicineItems.MedicineItem;
import Business.Orders.Orders;
import Business.Pharmacy.Pharmacy;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author cylai
 */
public class HospitalOrderAction extends javax.swing.JPanel{
    
    JPanel userProcessContainer;
    Customer customer;
    Pharmacy pharma;
    Orders orders;
    int totalAmount = 0;
    Hospital hospital;
    ArrayList<MedicineItem> cart = new ArrayList<MedicineItem>();


    public HospitalOrderAction(JPanel userProcessContainer, Hospital hospital, Pharmacy pharmacy) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.hospital = hospital;
        this.pharma = pharmacy;
       
        populateMedicine1(); 
        populateOrder1();
        if(HOAOrderTable.getRowCount() <= 0)
        {
            HOAOrderButton.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")



    private void HOAOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
        orders = pharma.getOrderDirectory().createNewOrderH(hospital);
        for(MedicineItem mo : cart)
        {
            orders.addItem(mo);
        }
        orders.calculateTotalAmount();
        JOptionPane.showMessageDialog(null, "Thank you for your order! Order of " + orders.getMedicineItemList().size() + " medicine item(s) for amount $" + orders.getTotalAmount() + " is placed successfully!");
    }


    private void HospMedicineTableMouseClicked(java.awt.event.MouseEvent evt) {                                               
        // TODO add your handling code here:
        int selectedRow = HospMedicineTable.getSelectedRow();
        if (selectedRow >= 0)
        {
            AddHospMedicineItemButton.setEnabled(true);
        }
    }                                              

    private void AddHospMedicineItemButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                          
        // TODO add your handling code here:
        int selectedRow = HospMedicineTable.getSelectedRow();
        if (selectedRow >= 0)
        {
            MedicineItem mi2 = (MedicineItem) HospMedicineTable.getValueAt(selectedRow, 1);

            cart.add(mi2);
            JOptionPane.showMessageDialog(null, "Medicine Item " + mi2.getName()+ " added to cart successfully!");
            totalAmount = totalAmount + mi2.getPrice();
            populateOrder1();
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Please select a row!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
    }                                                         

    private void HOABackButtonFocusLost(java.awt.event.FocusEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void HOABackButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }                                             

    private void HOADeleteItemButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // TODO add your handling code here:
        int selectedRow1 = HOAOrderTable.getSelectedRow();
        if (selectedRow1 >= 0)
        {
            MedicineItem mi1 = (MedicineItem) HOAOrderTable.getValueAt(selectedRow1, 1);
            //order.deleteFoodItem(fi);
            cart.remove(mi1);
            JOptionPane.showMessageDialog(null, "Medicine Item " + mi1.getName()+ " deleted from cart successfully!");
            totalAmount = totalAmount - mi1.getPrice();
            populateOrder1();
        }
        else
        {
            JOptionPane.showMessageDialog(null,"Please select a row!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
    }                                                   

    private void HOAOrderTotalAmountTextActionPerformed(java.awt.event.ActionEvent evt) {                                                        
        // TODO add your handling code here:
    }                                                       


     // Variables declaration - do not modify                     
     private javax.swing.JButton AddHospMedicineItemButton;
     private javax.swing.JButton HOABackButton;
     private javax.swing.JButton HOADeleteItemButton;
     private javax.swing.JButton HOAOrderButton;
     private javax.swing.JTable HOAOrderTable;
     private javax.swing.JTextField HOAOrderTotalAmountText;
     private javax.swing.JLabel HOATotalAmountLabel;
     private javax.swing.JTable HospMedicineTable;
     private javax.swing.JScrollPane jScrollPane1;
     private javax.swing.JScrollPane jScrollPane2;
     // End of variables declaration                   
 
 private void populateMedicine1() {
         DefaultTableModel dtm = (DefaultTableModel)HospMedicineTable.getModel();
         dtm.setRowCount(0);
         if(pharma.getMedicineCatalog().getMedicineItemList() != null)
         {
             for(MedicineItem mi : pharma.getMedicineCatalog().getMedicineItemList())
             {
                 Object[] row = new Object[dtm.getColumnCount()];
                 row[0] = mi.getId();
                 row[1] = mi;
                 row[2] = mi.getPrice();
                 dtm.addRow(row);
             }
         }
         if(dtm.getRowCount() == 0)
             {
                 AddHospMedicineItemButton.setEnabled(false);
                 HOADeleteItemButton.setEnabled(false);
             }
     }
 
     private void populateOrder1() {
         DefaultTableModel dtm = (DefaultTableModel)HOAOrderTable.getModel();
         dtm.setRowCount(0);
         if(cart != null)
         {
             HOADeleteItemButton.setEnabled(true);
             HOAOrderButton.setEnabled(true);
             int count = 1;
             for(MedicineItem mi3 : cart)
             {
                 Object[] row = new Object[dtm.getColumnCount()];
                 row[0] = count;
                 row[1] = mi3;
                 row[2] =  mi3.getPrice();
                 dtm.addRow(row);
                 count++;
             }
             HOAOrderTotalAmountText.setText(Integer.toString(totalAmount));
         }
         if(HOAOrderTable.getRowCount() <= 0)
         {
             HOAOrderButton.setEnabled(false);
             HOADeleteItemButton.setEnabled(false);
         }
 
 
 
 
     }










}
